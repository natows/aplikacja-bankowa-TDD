# name: Python application with Gherkin tests

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.10"
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest coverage behave unittest-assertions
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#     - name: Start Flask app
#       run: |
#         python3 -m flask --app app/api.py run &
#         sleep 10
#     - name: Run Gherkin tests with Behave
#       run: |
#         python -m behave app/features
#     # - name: Stop Flask app
#       # run: |
#       #   kill $(lsof -t -i:5000)
name: Python application with Gherkin tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage behave unittest-assertions
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Start Flask app
      run: |
        python3 -m flask --app app/api.py run --host=0.0.0.0 --port=5000 --debug &
        sleep 10  # Daj czas na uruchomienie aplikacji
    - name: Wait for Flask to be ready
      run: |
        until curl -s http://localhost:5000; do
          echo "Waiting for Flask to be available..."
          sleep 2
        done
        echo "Flask is ready!"
    - name: Run Gherkin tests with Behave
      run: |
        python -m behave app/features
    - name: Stop Flask app
      run: |
        kill $(lsof -t -i:5000)  # Zatrzymaj Flask po zakończeniu testów